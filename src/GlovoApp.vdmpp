class GlovoApp

types
	
	public String = seq of char;

instance variables

	private sellers: seq of Seller := [];
	private drivers: seq of Driver := [];
	private users: seq of User := [];
	private orders: seq of Order := [];

operations

	-- returns all the available sellers
	pure public getSellers : () ==> seq of Seller
		getSellers () == (
			return sellers;
	);
	
	-- returns a seller by name
	pure public getSellerByName : String ==> Seller
		getSellerByName (name) == (		
			for seller in sellers do (
				if seller.getName() = name then return seller;
			);
			
			return new Seller();
		)
		pre name in set { s.getName() | s in set elems sellers };
	
	-- returns all the drivers
	pure public getDrivers : () ==> seq of Driver
		getDrivers () == (
			return drivers;
	);
	
	-- returns all the available drivers
	pure public getAvailableDrivers : () ==> seq of Driver
		getAvailableDrivers () == (
			dcl availableDrivers : seq of Driver := [];
			
			for driver in drivers do (
				if driver.getStatus() = <available> then
					availableDrivers := availableDrivers ^ [driver];
			);
			
			return availableDrivers;
		);
	
	-- returns all the users
	pure public getUsers : () ==> seq of User
		getUsers () == (
			return users;
	);
	
	-- returns a user by name
	pure public getUserByName : String ==> User
		getUserByName (name) == (		
			for user in users do (
				if user.getName() = name then return user;
			);
			
			return new User();
		)
		pre name in set { u.getName() | u in set elems users };

	-- returns all the available orders
	pure public getOrders : () ==> seq of Order
		getOrders () == (
			return orders;
	);
	
	-- adds a seller to Glovo
	public addSeller : Seller ==> ()
		addSeller (newSeller) == (
			sellers := sellers ^ [newSeller];
		)
		pre forall seller in set elems sellers & seller.getName() <> newSeller.getName();
	
	-- adds a driver to Glovo
	public addDriver : Driver ==> ()
		addDriver (newDriver) == (
			drivers := drivers ^ [newDriver];
		)
		pre forall driver in set elems drivers & driver.getName() <> newDriver.getName();
		
	-- registers a user in Glovo
	public registerUser : User ==> ()
		registerUser (newUser) == (
			users := users ^ [newUser];
		)
		pre forall user in set elems users & user.getName() <> newUser.getName();
		
	-- makes a new order
	public addOrder : Order ==> ()
		addOrder (order) == (			
			dcl availableDrivers : seq of Driver;

			orders := orders ^ [order];
			
			availableDrivers := getAvailableDrivers();
			if len availableDrivers > 0 then 
				order.startDelivery(hd availableDrivers);
		);
		
	-- adds an item to a seller by name
	public addItemToSeller : String * Item ==> ()
		addItemToSeller (sellerName, item) == (
			for seller in sellers do (
				if seller.getName() = sellerName then seller.addItem(item);
			)
		);
		
	-- returns all restaurants in a city
	public getRestaurantsByCity : String ==> seq of Restaurant
		getRestaurantsByCity(city) == (
			dcl restaurants : seq of Restaurant := [];
		
			for seller in sellers do (
					if is_(seller, Restaurant) and seller.getCity() = city then restaurants := restaurants ^ [seller];
			);
			
			return restaurants;
		)
		post forall restaurant in set elems RESULT & is_(restaurant, Restaurant);
		
	-- returns all stores in a city
	public getStoresByCity : String ==> seq of Store
		getStoresByCity(city) == (
			dcl stores : seq of Store := [];
		
			for seller in sellers do (
					if is_(seller, Store) and seller.getCity() = city then stores := stores ^ [seller];
			);
			
			return stores;
		)
		post forall store in set elems RESULT & is_(store, Restaurant);

end GlovoApp