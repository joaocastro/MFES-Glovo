class Order

types

	public String = seq of char;
	public TimeStamp :: minutes : nat
											seconds : nat;
	public State = <waiting> | <delivering> | <delivered>;

instance variables

	private deliveryAddress: String := [];
	private deliveryPrice: rat;
	private deliveryTime: TimeStamp;
	private items: seq of Item := [];
	private user: User;
	private seller: Seller;
	private state: State := <waiting>;
	private driver: Driver;

operations

	public Order : String * rat * TimeStamp * seq of Item * User * Seller ==> Order
		Order (orderDeliveryAddress, orderDeliveryPrice, orderDeliveryTime, orderItems, orderUser, orderSeller) == (
			deliveryAddress := orderDeliveryAddress;
			deliveryPrice := orderDeliveryPrice;
			deliveryTime := orderDeliveryTime;
			items := orderItems;
			user := orderUser;
			seller := orderSeller;
			return self
		)
	pre len orderDeliveryAddress > 0 and 
		orderDeliveryPrice > 0 and 
		len orderItems > 0 and 
		orderUser.getCity() = orderSeller.getCity() and
		forall item in set elems orderItems & item in set elems seller.getItems();

	-- returns the order's delivery address
	pure public getDeliveryAddress : () ==> String
		getDeliveryAddress () == (
			return deliveryAddress;
	);

	-- returns the order's delivery price
	pure public getDeliveryPrice : () ==> rat
		getDeliveryPrice () == (
			return deliveryPrice;
	);
	
	-- returns the order's total price
	pure public getTotalPrice : () ==> rat
		getTotalPrice () == (
			dcl totalPrice : rat := deliveryPrice;
			
			for item in items do (
				totalPrice := totalPrice + item.getPrice();
			);
			
			return totalPrice;
	);
	
	-- returns the order's delivery time
	pure public getDeliveryTime : () ==> TimeStamp
		getDeliveryTime () == (
			return deliveryTime;
	);
	
	-- returns the order's items
	pure public getItems : () ==> seq of Item
		getItems () == (
			return items;
	);
	
	-- returns the order's seller
	pure public getSeller : () ==> Seller
		getSeller () == (
			return seller;
	);
	
	-- returns the order's seller
	pure public getUser : () ==> User
		getUser () == (
			return user;
	);
	
	-- returns the order's state
	pure public getState : () ==> State
		getState () == (
			return state;
	);
	
	-- returns the order's driver
	pure public getDriver : () ==> Driver
		getDriver () == (
			return driver;
	);
	
	public assignDriver : Driver ==> ()
		assignDriver (assignee) == (
			driver := assignee;
			state := <delivering>;
		)
	pre state = <waiting> and 
		assignee.getCity() = user.getCity() and
		assignee.getStatus() = <available>;
	
	public finishDelivery : () ==> ()
		finishDelivery () == (
			user.charge(getTotalPrice());
			driver.makeAvailable();
			state := <delivered>;
		)
		

end Order