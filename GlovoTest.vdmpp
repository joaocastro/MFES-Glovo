class GlovoTest

instance variables

	private time : Order`TimeStamp := mk_Order`TimeStamp(5,10);
	private driTest1 : Driver := new Driver("Luis","Porto");
	private userTest1 : User := new User("Manuel", "Porto");
	private itemTest1 : Item := new Item("Caneta","Caneta para escrita",1);
	private items : seq of Item := [itemTest1];
	private restTest1 : Restaurant := new Restaurant("McDonalds","cadeia mundial de restaurantes de fast food","Aliados","Porto",5,<Fast_Food>);
	private storeTest1 : Store := new Store("FNAC","cadeia de lojas","NorteShopping","Porto",4, <Electronica>);
	private sellerTest1 : Seller := new Seller("Rui", "Teste", "FEUP", "Porto", 4);
	private appTest1 : GlovoApp := new GlovoApp();
	private sellers: seq of Seller := [sellerTest1];
	private users: seq of User := [userTest1];
	private drivers: seq of Driver := [driTest1];
	
operations
	private assertTrue: bool ==> ()
    assertTrue(cond) == return
    pre cond;
    
  private assertFalse: bool ==> ()
  	assertFalse(cond) == return
    pre not cond;
    
  private assertEqual: ? * ? ==> ()
    assertEqual(expected, actual) == return
		post expected = actual;
		
	private testDriver() == (
		assertEqual(driTest1.getName(), "Luis");
		assertEqual(driTest1.getCity(), "Porto");
		assertEqual(driTest1.getStatus(), <available>);
		driTest1.makeUnavailable();
		assertEqual(driTest1.getStatus(), <unavailable>);
		driTest1.makeAvailable();
		driTest1.makeDelivering();
		assertEqual(driTest1.getStatus(), <delivering>);
	);
	
	private testUser() == (
		assertEqual(userTest1.getName(), "Manuel");
		assertEqual(userTest1.getCity(), "Porto");
		userTest1.deposit(5);
		assertEqual(userTest1.getBalance(), 5);
		userTest1.charge(5);
		assertEqual(userTest1.getBalance(), 0);
	);
	
	private testItem() == (
		assertEqual(itemTest1.getName(), "Caneta");
		assertEqual(itemTest1.getInfo(), "Caneta para escrita");
		assertEqual(itemTest1.getPrice(), 1);
	);
	
	private testRestaurant() == (
		assertEqual(restTest1.getCategory(), <Fast_Food>);
		assertEqual(restTest1.getDeliveryPrice(), 5);
		assertEqual(restTest1.getName(), "McDonalds");
		assertEqual(restTest1.getDescription(),"cadeia mundial de restaurantes de fast food");
		assertEqual(restTest1.getAddress(), "Aliados");
		assertEqual(restTest1.getCity(), "Porto");
		restTest1.addItem(itemTest1);
		assertEqual(restTest1.getItems(),items);
	);
	
	private testStore() == (
		assertEqual(storeTest1.getName(), "FNAC");
		assertEqual(storeTest1.getDescription(), "cadeia de lojas");
		assertEqual(storeTest1.getAddress(), "NorteShopping");
		assertEqual(storeTest1.getCity(), "Porto");
		storeTest1.addItem(itemTest1);
		assertEqual(storeTest1.getItems(),items);
	);
	
	private testSeller() == (
		assertEqual(sellerTest1.getName(), "Rui");
		assertEqual(sellerTest1.getDescription(), "Teste");
		assertEqual(sellerTest1.getAddress(), "FEUP");
		assertEqual(sellerTest1.getCity(), "Porto");
		sellerTest1.addItem(itemTest1);
		assertEqual(sellerTest1.getItems(),items);
	);
	
	private testOrder() == (
		dcl orderTest1 : Order;
		dcl restaurant : Restaurant := new Restaurant("McDonalds", "Cadeia mundial de restaurantes de fast food", "Aliados", "Porto", 5, <Fast_Food>);
		dcl item : Item := new Item("BigMac", "Hamburger classico", 3.45);
		restaurant.addItem(item);
		orderTest1 := new Order("Rua da FEUP", time, [item], userTest1, restaurant);
		userTest1.deposit(50);
		orderTest1.startDelivery(driTest1);
  	assertEqual(driTest1.getStatus(),<delivering>);
		orderTest1.finishDelivery();
		assertEqual(driTest1.getStatus(),<available>);
	);
	
	private testApp() == (
		appTest1.addDriver(driTest1);
		appTest1.addSeller(sellerTest1);
		appTest1.registerUser(userTest1);
		assertEqual(appTest1.getDrivers(),drivers);
		assertEqual(appTest1.getSellers(),sellers);
		assertEqual(appTest1.getUsers(),users);
	);
	
	public static main: () ==> ()
    main() ==
    (
    	new GlovoTest().testDriver();
    	new GlovoTest().testUser();
    	new GlovoTest().testItem();
    	new GlovoTest().testRestaurant();
    	new GlovoTest().testSeller();
    	new GlovoTest().testStore();
    	new GlovoTest().testOrder();
    	new GlovoTest().testApp();
	);

end GlovoTest